# -*- coding: utf-8 -*-
"""NavegacionRobot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1roSEU3DEOcriqLLaX9gLmQ1NB7ghYZZC
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""## Navegación Robot

- 0: ADELANTE
- 1: GIRAR A LA DERECHA
- 2: GIRAR A LA IZQUIERDA

## Local instalation (option 1)

Install the following Python packages to run this notebook

`pip install pip -U`

`pip install tensorflow jupyter`

### How install extra packages
Google Colab installs a series of basic packages if we need any additional package just install it.
"""

!pip install -q keras sklearn

"""## Import packages"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import collections

import sklearn
from sklearn.model_selection import train_test_split
from sklearn import metrics

import tensorflow as tf
import tensorflow_datasets as tfds

from tensorflow import keras
from tensorflow.keras.preprocessing.image import array_to_img, img_to_array, load_img
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers

from keras.callbacks import ModelCheckpoint, EarlyStopping
from keras.preprocessing.image import ImageDataGenerator


#from sklearn.utils import class_weight
#from sklearn.model_selection import KFold, StratifiedKFold
#import warnings
#warnings.filterwarnings('ignore')

"""## Define global constants

Lets start with a few epochs to test learning network parameters
"""

batch_size = 32
nb_classes = 3
epochs = 15

"""## Build LeNet5 structure

<center><img src="https://www.dlsi.ua.es/~juanra/UA/curso_verano_DL/images/LeNet5.jpg"></center>

Building the model:

**Modelo inicial:**
"""

#Mejor hasta el momento: relu
activation = "relu"


def cnn_model():
    #
    # Neural Network Structure
    #
    
    input_shape = (32, 32, 3)

    inputs = keras.Input(shape=input_shape)
    
    x = layers.Conv2D(52, (5, 5), activation=activation)(inputs)
    x = layers.MaxPooling2D(pool_size=(4, 4))(x)

    x = layers.Conv2D(124, (5, 5), activation=activation)(x)
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)

    x = layers.Flatten()(x)

    x = layers.Dense(120, activation=activation)(x)
    x = layers.Dense(84, activation=activation)(x)
    x = layers.Dense(32, activation=activation)(x)
    

    outputs = layers.Dense(nb_classes, activation='softmax')(x)

    model = keras.Model(inputs=inputs, outputs=outputs)

    return model

model = cnn_model()
keras.utils.plot_model(model, 'my_first_model_with_shape_info.png', show_shapes=True)

"""## Start to run the program

Métricas:
"""

# Definimos el datagen
datagen = ImageDataGenerator(
  rescale=1./255,
  validation_split=0.1
)

# Le cargamos el dataset de imágenes
inputs = datagen.flow_from_directory(
    "/content/drive/MyDrive/datasets/navegacion_var",
    target_size=(32, 32),
    batch_size=batch_size,
    class_mode="categorical"
)

model = cnn_model()

model.compile(loss='categorical_crossentropy',optimizer='adam', metrics=['accuracy'])
early_stopping = EarlyStopping(monitor='accuracy', patience=4)

#Entrenamos el modelo
model.fit(inputs, epochs=epochs, batch_size=batch_size , verbose=2, callbacks=early_stopping)
  
print(model.summary())

"""#Guardar red"""

'''
import json
json_config = model.to_json()
with open('modelo.json', 'w') as f:
    json.dump(json_config, f)
'''

model.save('./modelo/modelo.h5')
model.save_weights('./modelo/pesos.h5')

def predict(file):
  x = load_img(file, target_size=(32, 32))
  x = img_to_array(x)
  x = np.expand_dims(x, axis=0)
  array = model.predict(x)
  result = array[0]
  answer = np.argmax(result)
  if answer == 0:
    print("pred: Adelante")
  #elif answer == 1:
    #print("pred: Atrás")
  elif answer == 1:
    print("pred: Derecha")
  elif answer == 2:
    print("pred: Izquierda")
  return answer

print("Adelante:")
for i in range(15):
  if(i<10): 
    predict("/content/drive/MyDrive/datasets/navegacion_var/adelante/adelante000"+str(i)+".jpg")
  else:
    predict("/content/drive/MyDrive/datasets/navegacion_var/adelante/adelante00"+str(i)+".jpg")

print()
print("Derecha:")
for i in range(15):
  if(i<10):
    predict("/content/drive/MyDrive/datasets/navegacion_var/derecha/derecha000"+str(i)+".jpg")
  else:
    predict("/content/drive/MyDrive/datasets/navegacion_var/derecha/derecha00"+str(i)+".jpg")

print()
print("Izquierda:")
for i in range(15):
  if(i<10):
    predict("/content/drive/MyDrive/datasets/navegacion_var/izquierda/izquierda000"+str(i)+".jpg")
  else:
    predict("/content/drive/MyDrive/datasets/navegacion_var/izquierda/izquierda00"+str(i)+".jpg")