# -*- coding: utf-8 -*-
"""EsquivarRobot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zEQwtcKml-Cv-60aCp8k82-Xas-YgEDe
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""## Esquivar Robot

- 0: No hay un robot que esquivar
- 1: Hay un robot a la derecha
- 2: Hay un robot a la izquierda

## Local instalation (option 1)

Install the following Python packages to run this notebook

`pip install pip -U`

`pip install tensorflow jupyter`

### How install extra packages
Google Colab installs a series of basic packages if we need any additional package just install it.
"""

!pip install -q keras sklearn

"""## Import packages"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import collections

import sklearn
from sklearn.model_selection import train_test_split
from sklearn import metrics

import tensorflow as tf
import tensorflow_datasets as tfds

from tensorflow import keras
from tensorflow.keras.preprocessing.image import array_to_img, img_to_array, load_img
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers

from keras.callbacks import ModelCheckpoint, EarlyStopping
from sklearn.utils import class_weight

from sklearn.model_selection import KFold, StratifiedKFold

from keras.preprocessing.image import ImageDataGenerator

#from scipy.stats import wilcoxon
#import warnings
#warnings.filterwarnings('ignore')
#from skimage import data, img_as_float, exposure

print("Versión de Tensorflow: " + tf.__version__)
print("Versión de Keras: " + keras.__version__)

"""## Define global constants

Lets start with a few epochs to test learning network parameters
"""

batch_size = 32
nb_classes = 3
epochs = 6

"""## Build LeNet5 structure

<center><img src="https://www.dlsi.ua.es/~juanra/UA/curso_verano_DL/images/LeNet5.jpg"></center>

Building the model:

**(Mejor hasta el momento)** -> Funciones de activación ReLU

**Modelo inicial:**
"""

#Funciones de optimización probadas: sigmoid, tanh, relu, selu
#Mejor hasta el momento: relu
activation = "relu"


def cnn_model():
    #
    # Neural Network Structure
    #
    
    input_shape = (32, 32, 3)

    inputs = keras.Input(shape=input_shape)
    
    x = layers.Conv2D(52, (5, 5), activation=activation)(inputs)
    x = layers.MaxPooling2D(pool_size=(4, 4))(x)

    x = layers.Conv2D(124, (5, 5), activation=activation)(x)
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)

    x = layers.Flatten()(x)

    x = layers.Dense(120, activation=activation)(x)
    x = layers.Dense(84, activation=activation)(x)
    x = layers.Dense(32, activation=activation)(x)
    

    outputs = layers.Dense(nb_classes, activation='softmax')(x)

    model = keras.Model(inputs=inputs, outputs=outputs)

    return model


model = cnn_model()
keras.utils.plot_model(model, 'my_first_model_with_shape_info.png', show_shapes=True)

"""## Start to run the program"""

datagen = ImageDataGenerator(
  rescale=1./255
)

inputs = datagen.flow_from_directory(
    "/content/drive/MyDrive/datasets/esquivar_var",
    target_size=(32, 32),
    batch_size=batch_size,
    class_mode="categorical" 
)

model = cnn_model()

model.compile(loss='categorical_crossentropy',optimizer='adam', metrics=['accuracy'])
early_stopping = EarlyStopping(monitor='accuracy', patience=4)

#Entrenamos el modelo
model.fit(inputs, epochs=epochs, batch_size=batch_size ,verbose=2, callbacks=early_stopping)

print(model.summary())

"""#Guardar red"""

model.save('./modelo/modeloEsquivar.h5')
model.save_weights('./modelo/pesosEsquivar.h5')

def predict(file):
  x = load_img(file, target_size=(32, 32))
  x = img_to_array(x)
  x = np.expand_dims(x, axis=0)
  array = model.predict(x)
  result = array[0]
  answer = np.argmax(result)
  if answer == 0:
    print("pred: No Robot")
  elif answer == 1:
    print("pred: Robot a la derecha")
  elif answer == 2:
    print("pred: Robot a la izquierda")
  else:
    print("Extraño fallo")

  return answer

print()
print("No Robot:")
for i in range(10):
  print(predict("/content/drive/MyDrive/datasets/esquivar_var/no_robot/adelante000"+str(i)+".jpg"))

print()
print("Robot a la derecha:")
for i in range(1, 10):
  print(predict("/content/drive/MyDrive/datasets/esquivar_var/robot_derecha/robotderecha"+str(i)+".jpg"))

print()
print("Robot a la izquierda:")
for i in range(2, 10):
  print(predict("/content/drive/MyDrive/datasets/esquivar_var/robot_izquierda/robotizquierda"+str(i)+".jpg"))